// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientProgramProofRequest {
    /// The number of steps in the trace.
    #[prost(int32, tag = "1")]
    pub steps_in_trace: i32,
    /// The number of steps in the proof.
    ///
    /// Clients may batch up several proofs and report
    /// progress this way.
    #[prost(int32, tag = "2")]
    pub steps_proven: i32,
    /// The step where the proof started.
    #[prost(int32, tag = "3")]
    pub step_to_start: i32,
    /// A unique string identifier for the
    /// program being proved.
    #[prost(string, tag = "4")]
    pub program_id: ::prost::alloc::string::String,
    /// Authentication token for client id.
    #[prost(string, tag = "5")]
    pub client_id_token: ::prost::alloc::string::String,
    /// Duration of the proof in milliseconds.
    #[prost(int32, tag = "6")]
    pub proof_duration_millis: i32,
    /// Speed of the proof in cycles per second.
    #[prost(float, tag = "7")]
    pub proof_speed_hz: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientProgramProofResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProofRequest {
    #[prost(message, optional, tag = "1")]
    pub program: ::core::option::Option<CompiledProgram>,
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<VmProgramInput>,
    /// Step of the trace to start the proof, inclusive.
    ///
    /// If missing, proving starts at the beginning of the trace.
    #[prost(int32, optional, tag = "3")]
    pub step_to_start: ::core::option::Option<i32>,
    /// Number of steps for this proof request.
    ///
    /// If zero, proving is skipped. If missing, all steps are proved.
    #[prost(int32, optional, tag = "4")]
    pub steps_to_prove: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProofResponse {
    #[prost(message, optional, tag = "1")]
    pub proof: ::core::option::Option<Proof>,
}
/// Send a request to the orchestrator backend to request the current leaderboard.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaderboardRequest {
    /// The offset of the leaderboard to request.
    #[prost(int32, tag = "1")]
    pub offset: i32,
    /// The number of entries to request.
    #[prost(int32, tag = "2")]
    pub limit: i32,
}
/// The response to a leaderboard request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaderboardResponse {
    #[prost(message, repeated, tag = "1")]
    pub leaderboard: ::prost::alloc::vec::Vec<LeaderboardResponseEntry>,
}
/// An entry in the leaderboard.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LeaderboardResponseEntry {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub prover_id: i64,
    #[prost(int64, tag = "3")]
    pub total_cycles: i64,
    #[prost(double, tag = "4")]
    pub cycles_per_sec: f64,
    #[prost(int64, tag = "5")]
    pub rank: i64,
}
/// Request for the proof speed of the network.
///
/// empty because network speed is a global state, no request body
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NetworkSpeedRequest {}
/// Response to a network speed request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NetworkSpeedResponse {
    /// The proof speed of the network in cycles per second.
    #[prost(double, tag = "1")]
    pub network_cycles_per_sec: f64,
}
/// Request for the total number of cycles proved by the network.
///
/// empty because total cycles is a global state, no request body
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TotalCyclesRequest {}
/// Response to a total cycles request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TotalCyclesResponse {
    /// The total number of cycles proved by the network.
    #[prost(int64, tag = "1")]
    pub total_cycles_proved: i64,
}
/// Message from client to request the number of cycles proved by a user
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserCyclesProvedRequest {
    /// List of all firebase IDs associated with a given email.
    /// This is authenticated through Firebase Admin SDK on the client side
    /// and then passed to the orchestrator backend
    #[prost(string, repeated, tag = "1")]
    pub client_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Response to a user cycles proved request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserCyclesProvedResponse {
    /// The total number of cycles proved by the requesting user.
    #[prost(int64, tag = "1")]
    pub cycles_proved: i64,
}
/// Message from client to request data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDataRequest {
    #[prost(oneof = "client_data_request::Message", tags = "1, 2, 3, 4")]
    pub message: ::core::option::Option<client_data_request::Message>,
}
/// Nested message and enum types in `ClientDataRequest`.
pub mod client_data_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        /// Request for the proof speed of the network.
        #[prost(message, tag = "1")]
        NetworkSpeed(super::NetworkSpeedRequest),
        /// Request for the leaderboard.
        #[prost(message, tag = "2")]
        Leaderboard(super::LeaderboardRequest),
        /// Request for the total number of cycles proved by the network.
        #[prost(message, tag = "3")]
        TotalCycles(super::TotalCyclesRequest),
        /// Request for the total number of cycles proved by a user.
        #[prost(message, tag = "4")]
        UserCyclesProved(super::UserCyclesProvedRequest),
    }
}
/// Message returned to client with requested data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDataResponse {
    #[prost(oneof = "client_data_response::Message", tags = "1, 2, 3, 4")]
    pub message: ::core::option::Option<client_data_response::Message>,
}
/// Nested message and enum types in `ClientDataResponse`.
pub mod client_data_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        /// Response for the proof speed of the network.
        #[prost(message, tag = "1")]
        NetworkSpeed(super::NetworkSpeedResponse),
        /// Response for the leaderboard.
        #[prost(message, tag = "2")]
        Leaderboard(super::LeaderboardResponse),
        /// Response for the total number of cycles proved by the network.
        #[prost(message, tag = "3")]
        TotalCycles(super::TotalCyclesResponse),
        /// Response for the total number of cycles proved by a user.
        #[prost(message, tag = "4")]
        UserCyclesProved(super::UserCyclesProvedResponse),
    }
}
/// A message that always represents a program runnable on the Nexus VM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompiledProgram {
    #[prost(oneof = "compiled_program::Program", tags = "1")]
    pub program: ::core::option::Option<compiled_program::Program>,
}
/// Nested message and enum types in `CompiledProgram`.
pub mod compiled_program {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Program {
        /// ELF binary containing a program to be proved, expressed in the RV32I ISA.
        #[prost(bytes, tag = "1")]
        Rv32iElfBytes(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VmProgramInput {
    #[prost(oneof = "vm_program_input::Input", tags = "1")]
    pub input: ::core::option::Option<vm_program_input::Input>,
}
/// Nested message and enum types in `VMProgramInput`.
pub mod vm_program_input {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Input {
        /// Input expressed as raw bytes to be read as-is off of the input tape.
        #[prost(bytes, tag = "1")]
        RawBytes(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proof {
    #[prost(oneof = "proof::Proof", tags = "1")]
    pub proof: ::core::option::Option<proof::Proof>,
}
/// Nested message and enum types in `Proof`.
pub mod proof {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Proof {
        #[prost(bytes, tag = "1")]
        NovaBytes(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Progress {
    /// Completion status expressed as a number between zero and one,
    /// inclusive.
    #[prost(float, tag = "1")]
    pub completed_fraction: f32,
    /// The total size of the execution trace in steps.
    #[prost(int32, tag = "2")]
    pub steps_in_trace: i32,
    /// The number of steps of the execution trace to be proven.
    #[prost(int32, tag = "3")]
    pub steps_to_prove: i32,
    /// The number of steps proven so far.
    #[prost(int32, tag = "4")]
    pub steps_proven: i32,
}
/// Streamed messages sent to the orchestrator to keep it updated with the
/// prover's status.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProverRequest {
    #[prost(oneof = "prover_request::Contents", tags = "1, 2, 3, 4")]
    pub contents: ::core::option::Option<prover_request::Contents>,
}
/// Nested message and enum types in `ProverRequest`.
pub mod prover_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Contents {
        /// Details about this supply node for use by the orchestrator.
        #[prost(message, tag = "1")]
        Registration(super::ProverRequestRegistration),
        /// A completed proof.
        #[prost(message, tag = "2")]
        Proof(super::Proof),
        /// Periodic progress update for the current proof.
        #[prost(message, tag = "3")]
        Progress(super::Progress),
        /// Periodic liveness indicator when no proof is being computed.
        #[prost(message, tag = "4")]
        Heartbeat(super::Heartbeat),
    }
}
/// Metadata that helps the orchestrator schedule work to the requesting compute
/// supplier.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProverRequestRegistration {
    /// What type of prover this is.
    #[prost(enumeration = "ProverType", tag = "1")]
    pub prover_type: i32,
    /// A unique identifier for this prover, generated by the prover.
    ///
    /// Distinct provers must not share an identifier; do not use a constant value.
    #[prost(string, tag = "2")]
    pub prover_id: ::prost::alloc::string::String,
    /// The number of proof cycles that this prover expects to compute
    /// over the course of one second. Proof cycles are proof steps times k.
    #[prost(double, optional, tag = "3")]
    pub estimated_proof_cycles_hertz: ::core::option::Option<f64>,
    /// The network to prove on.
    #[prost(enumeration = "Network", tag = "4")]
    pub network: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProverResponse {
    /// Forward the literal request for now
    #[prost(message, optional, tag = "1")]
    pub to_prove: ::core::option::Option<ProofRequest>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heartbeat {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Network {
    /// Experimental new network types should leave the network unspecified.
    Unspecified = 0,
    /// A open "playground" for those looking to experience the Nexus protocol
    /// as a proof requestor, prover, app developer, or validator.
    Devnet = 1,
    /// Environment where recent releases undergo intermittent stress tests
    /// that focus on network performance, stability, and the behavior of
    /// network provers.
    Testnet = 2,
    /// Reserved for future use.
    Mainnet = 3,
}
impl Network {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Network::Unspecified => "NETWORK_UNSPECIFIED",
            Network::Devnet => "NETWORK_DEVNET",
            Network::Testnet => "NETWORK_TESTNET",
            Network::Mainnet => "NETWORK_MAINNET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NETWORK_UNSPECIFIED" => Some(Self::Unspecified),
            "NETWORK_DEVNET" => Some(Self::Devnet),
            "NETWORK_TESTNET" => Some(Self::Testnet),
            "NETWORK_MAINNET" => Some(Self::Mainnet),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProverType {
    /// Experimental new prover types should leave the prover type unspecified.
    Unspecified = 0,
    /// The default prover type, used for volunteered compute resources.
    Volunteer = 1,
    /// Provers running on public continuous integration.
    /// May restrict the types of programs that can be assigned.
    Ci = 2,
}
impl ProverType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProverType::Unspecified => "PROVER_TYPE_UNSPECIFIED",
            ProverType::Volunteer => "PROVER_TYPE_VOLUNTEER",
            ProverType::Ci => "PROVER_TYPE_CI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROVER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PROVER_TYPE_VOLUNTEER" => Some(Self::Volunteer),
            "PROVER_TYPE_CI" => Some(Self::Ci),
            _ => None,
        }
    }
}
